{"/about":{"title":"关于 SimpleLife","data":{}},"/docs":{"title":"Nextra","data":{"":"Nextra 是基于 Next.js 开发的一个主题框架，可让您构建以内容为中心的网站。它具有 Next.js 的所有强大功能，"}},"/docs/theme/configuration":{"title":"主题配置","data":{"":"该主题使用theme.config.jsx文件配置。它应该导出一个包含您的配置的对象，例如：\nexport default {\n  project: {\n    link: 'https://github.com/SimpleLifecst/nextra-template',\n  },\n  logo: <strong>SimpleLife</strong>,\n};\n下面列出了每个选项的详细信息。","全局配置#全局配置":"","文档存储库githubgitee-仓库#文档存储库(github/gitee 仓库)":"设置文档仓库 URL。它用于生成问题？给我反馈链接和在 GitHub 上编辑此页面链接。","指定路径#指定路径":"如果您的文档为子文件夹或存储库的不同分支中，您可以简单地将docsRepositoryBase设置为文档页面/文件夹的根路径。例如：\nexport default {\n  docsRepositoryBase:\n    'https://github.com/SimpleLifecst/nextra-template/tree/main/',\n};\n当点击如下链接，会在自动拼接上正确的路径","搜索引擎优化#搜索引擎优化":"您可以通过 useNextSeoProps 选项配置 SEO 相关设置。useNextSeoProps 函数返回将传递给 Next SEO 组件的道具。它也是一个钩子，因此您可以在里面使用像useRouter这样的 API 来有条件地返回值。\n例如，我们可以让所有的页面显示相同后缀的标题\nexport default {\n  useNextSeoProps() {\n    return {\n      titleTemplate: '%s – SimpleLife',\n    };\n  },\n};\n这个%s是一个占位符，它会替换我们页面的标题您也可以有条件地返回它，以避免在主页上添加后缀：\nexport default {\n  useNextSeoProps() {\n    const {asPath} = useRouter();\n    if (asPath !== '/') {\n      return {\n        titleTemplate: '%s – SimpleLife',\n      };\n    }\n  },\n};","head-标签#Head 标签":"配置网站的<head>标签。您可以添加元标签、标题、网站图标等。\n使用head属性添加网站图标不稳定，刷新页面图标就加载不出了，谨慎使用","静态-head-标签#静态 Head 标签":"如果你只有静态的头部标签，很容易直接把它们放在<head>内。例如：\nexport default {\n  head: (\n    <>\n      <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n      <meta property='og:title' content='SimpleLife' />\n      <meta property='og:description' content='This website is SimpleLife' />\n    </>\n  ),\n};","动态-head-标签#动态 Head 标签":"您还可以使用函数组件作为head，根据当前页面的前提动态生成 head 标签。例如：\nimport {useRouter} from 'next/router';\nimport {useConfig} from 'nextra-theme-docs';\nexport default {\n  head: () => {\n    const {asPath, defaultLocale, locale} = useRouter();\n    const {frontMatter} = useConfig();\n    const url =\n      'https://my-app.com' +\n      (defaultLocale === locale ? asPath : `/${locale}${asPath}`);\n    return (\n      <>\n        <meta property='og:url' content={url} />\n        <meta property='og:title' content={frontMatter.title || 'SimpleLife'} />\n        <meta\n          property='og:description'\n          content={frontMatter.description || 'This website is SimpleLife'}\n        />\n      </>\n    );\n  },\n};\n关于 useConfig API 部分待Nextra出更详细的文档","黑暗模式和主题#黑暗模式和主题":"自定义网站的主题内容。"}},"/docs/theme":{"title":"创建一个新项目","data":{"安装#安装":"npm i next react react-dom nextra nextra-theme-docs\npnpm add next react react-dom nextra nextra-theme-docs\nyarn add next react react-dom nextra nextra-theme-docs","添加-nextjs-配置#添加 Next.js 配置":"在项目的根目录中创建以下next.config.js文件：\nconst withNextra = require('nextra')({\n  theme: 'nextra-theme-docs',\n  themeConfig: './theme.config.jsx',\n});\n// 如果你有其他 Next.js 配置，你可以将它们作为参数传递给 withNextra\nconst nextConfig = {};\nmodule.exports = withNextra(nextConfig);","创建文档主题配置#创建文档主题配置":"在项目的根目录中创建主题 theme.config.jsx 文件。\nexport default {\n  logo: <span>My Nextra Documentation</span>,\n  project: {\n    link: 'https://github.com/simplelife/nextra-template',\n  },\n  // ... 其他配置选项\n};","启动#启动":"现在，您可以将您的第一个 MDX 页面创建为page/index.mdx：\n# Welcome to SimpleLife\nHello, world!\n在package.json配置启动命令，使用npm run dev运行你的项目\n\"scripts\": {\n  \"dev\": \"next dev\",\n},"}},"/docs/theme/page":{"title":"页面配置","data":{"":"在 Nextra 中，可以通过配置_meta.json文件来配置站点和页面结构。在文档主题中，有一些额外的选项可用于进一步自定义它。这些配置会影响主题的整体布局，尤其是导航栏和侧边栏。","页面#页面":"在pages文件下创建以.mdx后缀的文件，它是可以书写 markdown 语法和js语法侧边栏中显示的页面标题和顺序应在_meta.json文件中配置为键值对。例如，如果您有以下文件结构：\n您可以通过_meta.json文件定义页面在侧边栏中的显示方式\n{\n  \"index\": \"首页\",\n  \"contact\": \"联系我们\",\n  \"about\": \"关于\"\n}","文件夹#文件夹":"文件夹的配置方式与页面相同。例如：\n顶级_meta.json文件包含顶级页面和文件夹的元元素（导航栏名称）：\n{\n  \"index\": \"首页\",\n  \"contact\": \"联系我们\",\n  \"about\": \"关于\"\n  \"fruits\": \"水果\"\n}\n同理，嵌套的_meta.json文件包含同一文件夹中页面的元信息：\n{\n  \"apple\": \"苹果\",\n  \"banana\": \"香蕉\"\n}\n这样，页面的信息就被分组到目录中。您可以移动目录而无需更改_meta.json 文件。","外部链接#外部链接":"在导航菜单中添加外部链接，通过设置_meta.json中的href属性\n{\n  \"github_link\": {\n    \"title\": \"SimpleLife\", // 设置菜单名\n    \"href\": \"https://github.com/SimpleLifecst/nextra-template\"\n  }\n}\n要始终在新窗口中打开链接，请启用newWindow:true选项：\n{\n  \"github_link\": {\n    \"title\": \"SimpleLife\",\n    \"href\": \"https://github.com/SimpleLifecst/nextra-template\",\n    \"newWindow\": true\n  }\n}","隐藏菜单#隐藏菜单":"默认情况下，pages下的 MDX 文件页面都将显示在菜单栏上，如果你需要隐藏一个特殊的菜单，你可以在_meta.json设置\"display\":\"hidden\"\n{\n  \"index\": \"首页\",\n  \"contact\": {\n    \"display\": \"hidden\"\n  },\n  \"about\": \"关于\"\n}\n该页面仍然可以通过/contactURL 访问，但不会显示在侧边栏中。","导航栏#导航栏":"","子文档#子文档":"配置_meta.json中\"type\":\"page\"属性，它将在导航栏上显示为特殊页面，而不是侧边栏。使用此功能，您可以拥有多个“子文档”，以及始终可见的特殊页面或链接，例如“关于”。在您的顶级_meta.json文件中，您可以将所有内容设置为页面，而不是普通的侧边栏项目：\n{\n  \"index\": {\n    \"title\": \"Home\",\n    \"type\": \"page\"\n  },\n  \"about\": {\n    \"title\": \"About\",\n    \"type\": \"page\"\n  }\n}\n它的效果像这样：","菜单#菜单":"配置\"type\":\"menu\"设置为菜单，通过配置items来添加到导航栏的子项中 ：\n{\n  \"company\": {\n    \"title\": \"Company\",\n    \"type\": \"menu\",\n    \"items\": {\n      \"about\": \"关于\"\n      \"contact\": \"联系我们\"\n    }\n  }\n}","链接#链接":"与外部链接配置相同，您也可以在导航栏中配置外部链接：\n{\n  \"contact\": {\n    \"title\": \"Contact Us\",\n    \"type\": \"page\",\n    \"href\": \"https://example.com/contact\",\n    \"newWindow\": true\n  }\n}","后备预案#后备预案":"在上面的子文档示例中，我们必须为每个页面定义\"type\":\"page\"选项。为了方便起见，您可以使用*键来定义此文件夹中所有项目的后备配置：\n{\n  \"*\": {\n    \"type\": \"page\"\n  },\n  \"index\": \"首页\",\n  \"about\": \"关于\"\n}\n当所有项目都设置了\"type\":\"page\"时，它们是等效的。","分隔符#分隔符":"您可以使用占位符\"type\":\"separator\"在侧边栏菜单之间创建分隔线：\n{\n  \"index\": \"首页\",\n  \"---\": {\n    \"type\": \"separator\"\n  },\n  \"about\": \"关于\"\n}","高级#高级":"","主题组件#主题组件":"您可以使用theme属性为每个页面配置主题。例如，您可以禁用或启用特定页面的特定组件：\nbreadcrumb页面面包屑、footer底部版权信息、sidebar侧边栏、toc右侧目录、pagination翻页功能\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"breadcrumb\": false,\n      \"footer\": false,\n      \"sidebar\": false,\n      \"toc\": true,\n      \"pagination\": false\n    }\n  }\n}\n如果设置的是文件夹，所有子页面都将继承此属性。","布局#布局":"默认情况下，每个页面在其主题配置中都有\"layout\":\"default\"这是默认行为。","原始布局#原始布局":"默认情况下，Nextra 会为 MDX 内容提供样式（如 h1、h2、h3 等），设置布局\"layout\":\"raw\"，您可以使用最原始的布局，Nextra 不会额外注入样式，这样您可以更好的设计页面。\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"layout\": \"raw\"\n    }\n  }\n}","完全布局#完全布局":"您可能希望渲染一些具有完全容器宽度和高度的页面（将去掉目录右侧栏），这将但保留所有其他样式。您可以配置\"layout\":\"full\"来做到这一点：\n{\n  \"index\": {\n    \"title\": \"首页\",\n    \"theme\": {\n      \"layout\": \"full\"\n    }\n  }\n}","排版#排版":"typesetting控制排版细节，如字体特征、标题样式以及li和code等组件。文档主题中有default和article两种排版。默认值适用于大多数情况，如留档，但您可以使用article排版使其看起来像一个优雅的文章页面：\n{\n  \"about\": {\n    \"title\": \"关于\",\n    \"theme\": {\n      \"typesetting\": \"article\"\n    }\n  }\n}"}},"/":{"title":"Index","data":{}}}